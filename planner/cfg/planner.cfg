#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *
#from local_planner_limits import add_generic_localplanner_params
PACKAGE = "planner"
gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
#add_generic_localplanner_params(gen)

# For integers and doubles:
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max




# Robot 
grp_planner = gen.add_group("Optimization", type="tab")

grp_planner.add("allocatedTimeSecs", double_t, 0, "Maximum allocated time for the planner", 1.0, 0,10.0)
grp_planner.add("initialEpsilon", double_t, 0, "Initial epsilon value for the ARA planner",3.0,1.0,5.0)
grp_planner.add("factor", int_t, 0, "Number of times by which resolution should be changed",1,1,5)


grp_planner = gen.add_group("Environment", type="tab")

grp_planner.add("obstacleThreshold", int_t, 0, "obstacleThreshold in costmap", 90, 0,100)
grp_planner.add("costInscribedThreshold", int_t, 0, "costInscribedThreshold in costmap",90, 0,100)
grp_planner.add("costPossiblyCircumscribedThreshold", int_t, 0, "costPossiblyCircumscribedThreshold in costmap",1, 0,100)
grp_planner.add("nominalVelocity", double_t, 0, "Maximum velocity of robot in m/s", 1.0, 0,2.0)
grp_planner.add("timeToTurn45DegreeInplace", double_t, 0, "Time to turn 45 degree in place,in seconds",0.5,0.0,5.0)
grp_planner.add("robotWidth", double_t, 0, "Robot width in meters",0.2,0.1,2.0)
grp_planner.add("robotLength", double_t, 0, "Robot length in meters",0.2,0.1,2.0)

#  Defaults
def_optimization = gen.add_group("Restore", type="tab")    
def_optimization.add("restore_defaults", bool_t, 0, "Restore to the original configuration", False)






exit(gen.generate(PACKAGE, "planner", "planner"))

